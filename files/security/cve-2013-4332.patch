From 424e6bb32044b44638902cb11f02010772fa06d9 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@evolve-os.com>
Date: Sat, 18 Oct 2014 03:27:26 +0100
Subject: [PATCH 3/4] Address CVE-2013-4332 (backport)

Multiple integer overflows in malloc/malloc.c in the GNU C Library (aka glibc
or libc6) 2.18 and earlier allow context-dependent attackers to cause a denial
of service (heap corruption) via a large value to the (1) pvalloc, (2) valloc,
(3) posix_memalign, (4) memalign, or (5) aligned_alloc functions.

Signed-off-by: Ikey Doherty <ikey@evolve-os.com>
---
 malloc/malloc.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/malloc/malloc.c b/malloc/malloc.c
index be472b2..ebbe86d 100644
--- a/malloc/malloc.c
+++ b/malloc/malloc.c
@@ -3015,6 +3015,13 @@ __libc_memalign(size_t alignment, size_t bytes)
   /* Otherwise, ensure that it is at least a minimum chunk size */
   if (alignment <  MINSIZE) alignment = MINSIZE;
 
+  /* Check for overflow.  */
+  if (bytes > SIZE_MAX - alignment - MINSIZE)
+    {
+      __set_errno (ENOMEM);
+      return 0;
+    }
+
   arena_get(ar_ptr, bytes + alignment + MINSIZE);
   if(!ar_ptr)
     return 0;
@@ -3046,6 +3053,13 @@ __libc_valloc(size_t bytes)
 
   size_t pagesz = GLRO(dl_pagesize);
 
+  /* Check for overflow.  */
+  if (bytes > SIZE_MAX - pagesz - MINSIZE)
+    {
+      __set_errno (ENOMEM);
+      return 0;
+    }
+
   void *(*hook) (size_t, size_t, const void *) =
     force_reg (__memalign_hook);
   if (__builtin_expect (hook != NULL, 0))
@@ -3082,6 +3096,13 @@ __libc_pvalloc(size_t bytes)
   size_t page_mask = GLRO(dl_pagesize) - 1;
   size_t rounded_bytes = (bytes + page_mask) & ~(page_mask);
 
+  /* Check for overflow.  */
+  if (bytes > SIZE_MAX - 2*pagesz - MINSIZE)
+    {
+      __set_errno (ENOMEM);
+      return 0;
+    }
+
   void *(*hook) (size_t, size_t, const void *) =
     force_reg (__memalign_hook);
   if (__builtin_expect (hook != NULL, 0))
-- 
1.8.4

